{"version":3,"file":"static/js/898.e8625552.chunk.js","mappings":"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","sources":["components/edit-profile/index.tsx","components/jobs/index.tsx","components/profile/index.tsx","utils/common.ts","components/tag-select/index.tsx","fake-apis/job-listing-apis.ts"],"sourcesContent":["import { Form, Input, Typography } from 'antd';\r\nimport { useContext } from 'react';\r\nimport { USER_TYPE } from '../../constants';\r\nimport { UserContext } from '../../contexts/UserContext';\r\nimport { User } from '../../fake-apis/user-apis';\r\nimport TagSelect from '../tag-select';\r\n\r\nimport './styles.scss';\r\n\r\ninterface EditJobProps {\r\n    editProfileFormData: Partial<User & { confirmPassword: string }>;\r\n    setEditProfileFormData: React.Dispatch<React.SetStateAction<Partial<User>>>;\r\n}\r\n\r\nconst EditJob: React.FC<EditJobProps> = ({\r\n    editProfileFormData,\r\n    setEditProfileFormData,\r\n}) => {\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEditProfileFormData((prevData) => ({\r\n            ...prevData,\r\n            [e.target.name]: e.target.value,\r\n        }));\r\n    };\r\n    const { currentUser } = useContext(UserContext);\r\n    const isRecruiter: boolean =\r\n        currentUser?.userDetails.type === USER_TYPE.RECRUITER;\r\n\r\n    const onUserDetailsChangeHandler = (\r\n        e: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        setEditProfileFormData(\r\n            (prevData) =>\r\n                ({\r\n                    ...prevData,\r\n                    userDetails: {\r\n                        ...prevData.userDetails,\r\n                        [e.target.name]: e.target.value,\r\n                    },\r\n                } as User)\r\n        );\r\n    };\r\n\r\n    const onTagChange = (value: string[]) => {\r\n        setEditProfileFormData(\r\n            (prevData) =>\r\n                ({\r\n                    ...prevData,\r\n                    userDetails: {\r\n                        ...prevData.userDetails,\r\n                        skills: value,\r\n                    },\r\n                } as User)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <section className=\"edit-profile-wrapper\">\r\n            <Typography.Title className=\"title\">Edit Profile</Typography.Title>\r\n            <Form\r\n                name=\"edit-profile\"\r\n                layout=\"vertical\"\r\n                initialValues={{\r\n                    remember: true,\r\n                    name: editProfileFormData.name,\r\n                    email: editProfileFormData.email,\r\n                    companyName: editProfileFormData.userDetails?.companyName,\r\n                    contact: editProfileFormData.userDetails?.contact,\r\n                    githubUsername:\r\n                        editProfileFormData.userDetails?.githubUsername,\r\n                    location: editProfileFormData.userDetails?.location,\r\n                }}\r\n                autoComplete=\"on\"\r\n            >\r\n                <Form.Item label=\"Name\" name=\"name\">\r\n                    <Input\r\n                        name=\"name\"\r\n                        placeholder=\"* e.g. John Doe\"\r\n                        value={editProfileFormData.name}\r\n                        onChange={onChangeHandler}\r\n                        size=\"large\"\r\n                        required\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\">\r\n                    <Input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"* e.g. john.doe@xyz.com\"\r\n                        value={editProfileFormData.email}\r\n                        onChange={onChangeHandler}\r\n                        size=\"large\"\r\n                        required\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item label=\"Company\" name=\"companyName\">\r\n                    <Input\r\n                        name=\"companyName\"\r\n                        placeholder=\"* e.g. Intuit or Paytm\"\r\n                        value={editProfileFormData.userDetails?.companyName}\r\n                        onChange={onUserDetailsChangeHandler}\r\n                        size=\"large\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item label=\"Contact\" name=\"contact\">\r\n                    <Input\r\n                        name=\"contact\"\r\n                        placeholder=\"* e.g. 8260602123\"\r\n                        value={editProfileFormData.userDetails?.contact}\r\n                        onChange={onUserDetailsChangeHandler}\r\n                        size=\"large\"\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" name=\"password\">\r\n                    <Input.Password\r\n                        type=\"password\"\r\n                        className=\"password-input\"\r\n                        name=\"password\"\r\n                        placeholder=\"Set a password\"\r\n                        minLength={6}\r\n                        value={editProfileFormData.password}\r\n                        onChange={onChangeHandler}\r\n                        size=\"large\"\r\n                        required\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" name=\"confirmPassword\">\r\n                    <Input.Password\r\n                        type=\"password\"\r\n                        className=\"password-input\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Retype to confirm\"\r\n                        minLength={6}\r\n                        value={editProfileFormData.confirmPassword}\r\n                        onChange={onChangeHandler}\r\n                        size=\"large\"\r\n                        required\r\n                    />\r\n                </Form.Item>\r\n                {!isRecruiter ? (\r\n                    <Form.Item label=\"GitHub Username\" name=\"githubUsername\">\r\n                        <Input\r\n                            name=\"githubUsername\"\r\n                            placeholder=\"* Tell something about the role\"\r\n                            value={\r\n                                editProfileFormData.userDetails?.githubUsername\r\n                            }\r\n                            onChange={onUserDetailsChangeHandler}\r\n                            size=\"large\"\r\n                        />\r\n                    </Form.Item>\r\n                ) : null}\r\n                <Form.Item label=\"Location\" name=\"location\">\r\n                    <Input\r\n                        name=\"location\"\r\n                        placeholder=\"* e.g. Bengaluru or Remote\"\r\n                        value={editProfileFormData.userDetails?.location}\r\n                        onChange={onUserDetailsChangeHandler}\r\n                        size=\"large\"\r\n                    />\r\n                </Form.Item>\r\n                {!isRecruiter ? (\r\n                    <TagSelect\r\n                        onTagChange={onTagChange}\r\n                        defaultValue={editProfileFormData.userDetails?.skills}\r\n                    />\r\n                ) : null}\r\n            </Form>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default EditJob;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    notification,\r\n    Typography,\r\n    Modal,\r\n    Collapse,\r\n    Skeleton,\r\n    Tag,\r\n} from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { Job, updateJob } from '../../fake-apis/job-listing-apis';\r\n\r\nimport './styles.scss';\r\nimport { ERROR, SUCCESS } from '../../utils/fake-apis-utils';\r\nimport { getAppliedUsers, updateUser, User } from '../../fake-apis/user-apis';\r\nimport { UserContext } from '../../contexts/UserContext';\r\nimport { ROUTES, USER_TYPE } from '../../constants';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Loader from '../loader';\r\nimport Profile from '../profile';\r\n\r\ninterface JobsProps {\r\n    data: Array<Job>;\r\n}\r\n\r\nconst Jobs: React.FC<JobsProps> = ({ data }) => {\r\n    const { currentUser, setCurrentUserAndLocalStorage } =\r\n        useContext(UserContext);\r\n    const location = useLocation();\r\n    const isRecruiter = currentUser?.userDetails.type === USER_TYPE.RECRUITER;\r\n    const isProfileRoute = location.pathname === ROUTES.PROFILE;\r\n    const [jobApplicants, setJobApplicants] = useState<string[]>([]);\r\n    const [jobApplicantsData, setJobApplicantsData] = useState<User[]>([]);\r\n    const [isApplicantsDataLoading, setIsApplicantsDataLoading] =\r\n        useState<boolean>(true);\r\n    const [isJobModalOpen, setIsJobModalOpen] = useState<boolean>(false);\r\n    const [isApplicantsModalOpen, setIsApplicantsModalOpen] =\r\n        useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (jobApplicants.length > 0) {\r\n            getAppliedUsers(jobApplicants)\r\n                .then((data) => {\r\n                    setJobApplicantsData(data);\r\n                    setIsApplicantsDataLoading(false);\r\n                })\r\n                .catch(() => setIsApplicantsDataLoading(false));\r\n        }\r\n    }, [jobApplicants]);\r\n\r\n    const openJobModal = () => {\r\n        setIsJobModalOpen(true);\r\n    };\r\n\r\n    const handleJobOk = () => {\r\n        setIsJobModalOpen(false);\r\n    };\r\n\r\n    const handleJobCancel = () => {\r\n        setIsJobModalOpen(false);\r\n    };\r\n\r\n    const openApplicantsModal = (e: any, applicants: string[] = []) => {\r\n        e.stopPropagation();\r\n        setJobApplicants(applicants);\r\n        setIsApplicantsModalOpen(true);\r\n    };\r\n\r\n    const handleApplicantsOk = () => {\r\n        setIsApplicantsModalOpen(false);\r\n    };\r\n\r\n    const handleApplicantsCancel = () => {\r\n        setIsApplicantsDataLoading(true);\r\n        setJobApplicants([]);\r\n        setIsApplicantsModalOpen(false);\r\n    };\r\n\r\n    const onApplyClickHandler = async (\r\n        e: React.MouseEvent<HTMLButtonElement>,\r\n        jobId: string\r\n    ) => {\r\n        e.stopPropagation();\r\n\r\n        const newPayload = {\r\n            ...currentUser,\r\n            userDetails: {\r\n                ...currentUser?.userDetails,\r\n                appliedTo: [\r\n                    ...(currentUser?.userDetails.appliedTo as []),\r\n                    jobId,\r\n                ],\r\n            },\r\n        };\r\n\r\n        setCurrentUserAndLocalStorage?.(newPayload as User);\r\n\r\n        if (currentUser) {\r\n            try {\r\n                await updateUser(currentUser.email, newPayload as User);\r\n                await updateJob(jobId, { applicants: [currentUser.id] });\r\n\r\n                notification['success']({\r\n                    message: '',\r\n                    description: SUCCESS.JOB_APPLIED,\r\n                    placement: 'bottomRight',\r\n                });\r\n            } catch (error) {}\r\n        }\r\n    };\r\n\r\n    const onNotInterestedClickHandler = (\r\n        e: React.MouseEvent<HTMLButtonElement>\r\n    ) => {\r\n        e.stopPropagation();\r\n        notification['info']({\r\n            message: '',\r\n            description: ERROR.FEATURE_INCOMING,\r\n            placement: 'bottomRight',\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main className=\"job-listing\">\r\n                {data.map(\r\n                    ({\r\n                        id: jobId,\r\n                        companyName,\r\n                        contact,\r\n                        location,\r\n                        description,\r\n                        title,\r\n                        applicants,\r\n                        tags,\r\n                    }) => {\r\n                        return (\r\n                            <Card\r\n                                className=\"job-card\"\r\n                                key={jobId}\r\n                                hoverable\r\n                                onClick={openJobModal}\r\n                                bordered={false}\r\n                            >\r\n                                <div\r\n                                    className={`content ${\r\n                                        !isRecruiter && !isProfileRoute\r\n                                            ? 'content-candidate'\r\n                                            : ''\r\n                                    }`}\r\n                                >\r\n                                    <div className=\"logo\">\r\n                                        <Avatar\r\n                                            size=\"large\"\r\n                                            className=\"logo-image\"\r\n                                            icon={<UserOutlined />}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"job-details\">\r\n                                        <Typography.Paragraph className=\"title\">\r\n                                            <span>\r\n                                                {companyName} - {title}\r\n                                            </span>\r\n                                            {isRecruiter &&\r\n                                            applicants.length > 0 ? (\r\n                                                <Typography.Text\r\n                                                    className=\"applicants\"\r\n                                                    onClick={(e) =>\r\n                                                        openApplicantsModal(\r\n                                                            e,\r\n                                                            applicants\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    ({applicants.length}{' '}\r\n                                                    applicant\r\n                                                    {applicants.length > 1\r\n                                                        ? 's'\r\n                                                        : ''}\r\n                                                    )\r\n                                                </Typography.Text>\r\n                                            ) : null}\r\n                                        </Typography.Paragraph>\r\n                                        <Typography.Paragraph italic>\r\n                                            Job available in {location}\r\n                                            <Typography.Paragraph className=\"contact\">\r\n                                                {contact\r\n                                                    ? `Contact - ${contact}`\r\n                                                    : ''}\r\n                                            </Typography.Paragraph>\r\n                                        </Typography.Paragraph>\r\n                                        <Typography.Paragraph\r\n                                            ellipsis={{\r\n                                                expandable: false,\r\n                                                rows: 2,\r\n                                            }}\r\n                                        >\r\n                                            {description}\r\n                                        </Typography.Paragraph>\r\n                                        <Typography.Paragraph\r\n                                            className=\"tags\"\r\n                                            ellipsis\r\n                                        >\r\n                                            {tags.map((tag) => (\r\n                                                <Tag key={tag}>{tag}</Tag>\r\n                                            ))}\r\n                                        </Typography.Paragraph>\r\n                                    </div>\r\n                                </div>\r\n                                {!isRecruiter && !isProfileRoute ? (\r\n                                    <div className=\"action-center\">\r\n                                        <Button\r\n                                            type=\"primary\"\r\n                                            size=\"large\"\r\n                                            onClick={(e: any) =>\r\n                                                onApplyClickHandler(e, jobId)\r\n                                            }\r\n                                        >\r\n                                            Apply\r\n                                        </Button>\r\n                                        {/* Todo */}\r\n                                        <Button\r\n                                            type=\"link\"\r\n                                            size=\"large\"\r\n                                            onClick={\r\n                                                onNotInterestedClickHandler\r\n                                            }\r\n                                        >\r\n                                            Not interested\r\n                                        </Button>\r\n                                    </div>\r\n                                ) : null}\r\n                            </Card>\r\n                        );\r\n                    }\r\n                )}\r\n            </main>\r\n            <Modal\r\n                open={isJobModalOpen}\r\n                onOk={handleJobOk}\r\n                onCancel={handleJobCancel}\r\n            >\r\n                {/* Todo */}\r\n                {ERROR.FEATURE_INCOMING}\r\n            </Modal>\r\n            <Modal\r\n                className=\"applicants-modal\"\r\n                open={isApplicantsModalOpen}\r\n                onOk={handleApplicantsOk}\r\n                onCancel={handleApplicantsCancel}\r\n                cancelText=\"Close\"\r\n                okButtonProps={{ className: 'applicantsOkButton' }}\r\n            >\r\n                {isApplicantsDataLoading ? (\r\n                    <Loader />\r\n                ) : (\r\n                    <Collapse>\r\n                        {jobApplicantsData.map((applicant) => (\r\n                            <Collapse.Panel\r\n                                header={applicant.name}\r\n                                key={applicant.id}\r\n                            >\r\n                                <Profile applicant={applicant} />\r\n                            </Collapse.Panel>\r\n                        ))}\r\n                    </Collapse>\r\n                )}\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Jobs;\r\n","import {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    Empty,\r\n    Modal,\r\n    notification,\r\n    Skeleton,\r\n    Tag,\r\n    Typography,\r\n} from 'antd';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { ROUTES, USER_TYPE } from '../../constants';\r\nimport { UserContext } from '../../contexts/UserContext';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport {\r\n    getUserGitHubRepos,\r\n    updateUser,\r\n    User,\r\n} from '../../fake-apis/user-apis';\r\n\r\nimport './styles.scss';\r\nimport EditJob from '../edit-profile';\r\nimport { ERROR, SUCCESS } from '../../utils/fake-apis-utils';\r\nimport { validateEmail } from '../../utils/common';\r\nimport { getAppliedJobs, Job } from '../../fake-apis/job-listing-apis';\r\nimport Jobs from '../jobs';\r\n\r\ninterface ProfileProps {\r\n    applicant?: User;\r\n}\r\n\r\nconst Profile: React.FC<ProfileProps> = ({ applicant }) => {\r\n    const { currentUser, setCurrentUserAndLocalStorage } =\r\n        useContext(UserContext);\r\n    const currentUserProfile = applicant ?? currentUser;\r\n    const isRecruiter =\r\n        currentUserProfile?.userDetails.type === USER_TYPE.RECRUITER;\r\n    const [openEditProfileModal, setOpenEditProfileModal] = useState(false);\r\n    const [gitHubRepos, setGitHubRepos] = useState([]);\r\n    const [appliedJobs, setAppliedJobs] = useState<Job[]>([]);\r\n    const [initialFetching, setInitialFetching] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [initialJobsFetching, setInitialJobsFetching] = useState(true);\r\n    const [isJobsLoading, setIsJobsLoading] = useState(true);\r\n    const [isOkLoading, setIsOkLoading] = useState(false);\r\n    const [editProfileFormData, setEditProfileFormData] = useState<\r\n        Partial<User & { confirmPassword: string }>\r\n    >({\r\n        name: currentUserProfile?.name,\r\n        email: currentUserProfile?.email,\r\n        password: '',\r\n        confirmPassword: '',\r\n        userDetails: {\r\n            type: currentUserProfile?.userDetails.type as USER_TYPE,\r\n            contact: currentUserProfile?.userDetails.contact ?? '',\r\n            location: currentUserProfile?.userDetails.location ?? '',\r\n            githubUsername:\r\n                currentUserProfile?.userDetails.githubUsername ?? '',\r\n            skills: currentUserProfile?.userDetails.skills ?? [],\r\n            appliedTo: currentUserProfile?.userDetails.appliedTo ?? [],\r\n            companyName: currentUserProfile?.userDetails.companyName ?? '',\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!isRecruiter) {\r\n            getUserGitHubRepos(\r\n                currentUserProfile?.userDetails?.githubUsername as any\r\n            )\r\n                .then((data) => {\r\n                    setGitHubRepos(data);\r\n                    setInitialFetching(false);\r\n                    setIsLoading(false);\r\n                })\r\n                .catch(() => {\r\n                    setGitHubRepos([]);\r\n                    setInitialFetching(false);\r\n                    setIsLoading(false);\r\n                });\r\n\r\n            getAppliedJobs(\r\n                currentUserProfile?.userDetails?.appliedTo as string[]\r\n            )\r\n                .then((data) => {\r\n                    setAppliedJobs(data);\r\n                    setInitialJobsFetching(false);\r\n                    setIsJobsLoading(false);\r\n                })\r\n                .catch(() => {\r\n                    setAppliedJobs([]);\r\n                    setInitialJobsFetching(false);\r\n                    setIsJobsLoading(false);\r\n                });\r\n        }\r\n    }, [\r\n        currentUserProfile?.userDetails?.githubUsername,\r\n        currentUserProfile?.userDetails?.appliedTo,\r\n        isRecruiter,\r\n    ]);\r\n\r\n    if (!currentUserProfile) {\r\n        return <Navigate to={ROUTES.LOGIN} />;\r\n    }\r\n\r\n    const renderJobs = () => {\r\n        if (isJobsLoading) {\r\n            return <Skeleton active />;\r\n        }\r\n\r\n        if (!initialJobsFetching && appliedJobs.length === 0) {\r\n            return (\r\n                <div key=\"no-repo\" className=\"no-repo\">\r\n                    <Empty description=\"No jobs applied!\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Typography.Paragraph strong className=\"applied-jobs-title\">\r\n                    Applied Jobs\r\n                </Typography.Paragraph>\r\n                <Jobs data={appliedJobs} />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const renderSkills = () => {\r\n        if (currentUserProfile.userDetails.skills?.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Typography.Paragraph>\r\n                {currentUserProfile.userDetails.skills?.map((skill) => (\r\n                    <Tag key={skill}>{skill}</Tag>\r\n                ))}\r\n            </Typography.Paragraph>\r\n        );\r\n    };\r\n\r\n    const renderRepos = () => {\r\n        if (isLoading) {\r\n            return <Skeleton active />;\r\n        }\r\n\r\n        if (!initialFetching && gitHubRepos.length === 0) {\r\n            return (\r\n                <div key=\"no-repo\" className=\"no-repo\">\r\n                    <Empty description=\"No GitHub profile/ repo found.\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Typography.Paragraph strong className=\"github-repos-title\">\r\n                    GitHub Repos\r\n                </Typography.Paragraph>\r\n                {gitHubRepos.map((repo: any) => (\r\n                    <Card\r\n                        key={repo.id}\r\n                        className=\"git-card\"\r\n                        hoverable\r\n                        onClick={() => window.open(repo.html_url)}\r\n                        bordered={false}\r\n                    >\r\n                        <div className=\"left\">\r\n                            <Typography.Paragraph\r\n                                className=\"link\"\r\n                                strong\r\n                                ellipsis\r\n                            >\r\n                                {repo.name}\r\n                            </Typography.Paragraph>\r\n                            {repo.description ? (\r\n                                <Typography.Paragraph className=\"repo-description\">\r\n                                    {repo.description}\r\n                                </Typography.Paragraph>\r\n                            ) : null}\r\n                        </div>\r\n                        <div className=\"right\">\r\n                            <Typography.Paragraph>\r\n                                <Tag>Stars: {repo.stargazers_count}</Tag>\r\n                            </Typography.Paragraph>\r\n                            <Typography.Paragraph>\r\n                                <Tag>Watchers: {repo.watchers_count}</Tag>\r\n                            </Typography.Paragraph>\r\n                            <Typography.Paragraph>\r\n                                <Tag>Forks: {repo.forks_count}</Tag>\r\n                            </Typography.Paragraph>\r\n                        </div>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const editProfileHandler = () => {\r\n        setOpenEditProfileModal(true);\r\n    };\r\n\r\n    const createJobHandler = () => {\r\n        if (!validateEmail(editProfileFormData.email as string)) {\r\n            notification['error']({\r\n                message: '',\r\n                description: ERROR.INVALID_EMAIL,\r\n                placement: 'topRight',\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!editProfileFormData.name || !editProfileFormData.email) {\r\n            notification['error']({\r\n                message: '',\r\n                description: ERROR.CHECK_FORM_DATA,\r\n                placement: 'topRight',\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (\r\n            editProfileFormData.password !== editProfileFormData.confirmPassword\r\n        ) {\r\n            notification['error']({\r\n                message: '',\r\n                description: ERROR.PASSWORD_MISMATCH,\r\n                placement: 'topRight',\r\n            });\r\n            return;\r\n        }\r\n\r\n        setIsOkLoading(true);\r\n\r\n        const payload = {\r\n            ...editProfileFormData,\r\n        };\r\n\r\n        delete payload.confirmPassword;\r\n        if (!payload.password) delete payload.password;\r\n\r\n        updateUser(currentUserProfile.email, payload)\r\n            .then(() => {\r\n                setOpenEditProfileModal(false);\r\n                setIsOkLoading(false);\r\n                setCurrentUserAndLocalStorage?.({\r\n                    ...payload,\r\n                    id: currentUserProfile.id,\r\n                } as User);\r\n                notification['info']({\r\n                    message: '',\r\n                    description: SUCCESS.PROFILE_SAVED,\r\n                    placement: 'bottomRight',\r\n                });\r\n            })\r\n            .catch(() => {\r\n                setOpenEditProfileModal(false);\r\n                setIsOkLoading(false);\r\n            });\r\n    };\r\n\r\n    const cancelHandler = () => {\r\n        setOpenEditProfileModal(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"profile-wrapper\">\r\n            <Card className=\"profile-details-top profile-card\" bordered={false}>\r\n                <div>\r\n                    <div className=\"avatar-container\">\r\n                        <Avatar\r\n                            size=\"large\"\r\n                            className=\"avatar\"\r\n                            icon={<UserOutlined size={120} />}\r\n                        />\r\n                    </div>\r\n                    <Typography.Title className=\"title\">\r\n                        {currentUserProfile.name}\r\n                    </Typography.Title>\r\n                    {!applicant ? (\r\n                        <Button\r\n                            type=\"link\"\r\n                            className=\"edit-profile\"\r\n                            onClick={editProfileHandler}\r\n                        >\r\n                            Edit profile\r\n                        </Button>\r\n                    ) : null}\r\n                    <Modal\r\n                        className=\"edit-profile-modal\"\r\n                        open={openEditProfileModal}\r\n                        onOk={createJobHandler}\r\n                        onCancel={cancelHandler}\r\n                        okText=\"Save\"\r\n                        cancelButtonProps={{\r\n                            size: 'large',\r\n                            className: 'cancel-button',\r\n                        }}\r\n                        okButtonProps={{\r\n                            loading: isOkLoading,\r\n                            size: 'large',\r\n                            className: 'create-button',\r\n                        }}\r\n                    >\r\n                        <EditJob\r\n                            editProfileFormData={editProfileFormData}\r\n                            setEditProfileFormData={setEditProfileFormData}\r\n                        />\r\n                    </Modal>\r\n                </div>\r\n                <Typography.Paragraph>\r\n                    {currentUserProfile.email}\r\n                </Typography.Paragraph>\r\n                {currentUserProfile.userDetails.contact ? (\r\n                    <Typography.Paragraph>\r\n                        {currentUserProfile.userDetails.contact}\r\n                    </Typography.Paragraph>\r\n                ) : null}\r\n                {currentUserProfile.userDetails.location ? (\r\n                    <Typography.Paragraph>\r\n                        {currentUserProfile.userDetails.location}\r\n                    </Typography.Paragraph>\r\n                ) : null}\r\n                {currentUserProfile.userDetails.companyName ? (\r\n                    <Typography.Paragraph>\r\n                        {currentUserProfile.userDetails.companyName}\r\n                    </Typography.Paragraph>\r\n                ) : null}\r\n                {renderSkills()}\r\n            </Card>\r\n            {!isRecruiter && !applicant ? (\r\n                <Card className=\"applied-jobs profile-card\" bordered={false}>\r\n                    {renderJobs()}\r\n                </Card>\r\n            ) : null}\r\n            {!isRecruiter ? (\r\n                <Card className=\"github-repos profile-card\" bordered={false}>\r\n                    {renderRepos()}\r\n                </Card>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","export const debounce = (func: Function, delay: number = 100) => {\r\n    let timmer: string | number | NodeJS.Timeout | undefined;\r\n    return function () {\r\n        // @ts-ignore: Implicit type\r\n        const context = this;\r\n        const args = arguments;\r\n        clearTimeout(timmer);\r\n        timmer = setTimeout(() => func.apply(context, args), delay);\r\n    };\r\n};\r\n\r\nexport const validateEmail = (email: string) => {\r\n    var validRegex =\r\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n\r\n    if (email.match(validRegex)) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n","import { Select, Typography } from 'antd';\r\nimport React from 'react';\r\nimport { tagsOptions } from '../../constants';\r\n\r\nimport './styles.scss';\r\n\r\ninterface TagSelectProps {\r\n    onTagChange: (value: string[]) => void;\r\n    defaultValue?: string[];\r\n}\r\n\r\nconst TagSelect: React.FC<TagSelectProps> = ({\r\n    onTagChange,\r\n    defaultValue = [],\r\n}) => {\r\n    const renderOptions = () => {\r\n        return tagsOptions.map((tag) => (\r\n            <Select.Option key={tag}>{tag}</Select.Option>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <label>\r\n            <Typography.Paragraph>Tags</Typography.Paragraph>\r\n            <Select\r\n                showSearch\r\n                showArrow\r\n                className=\"search-input\"\r\n                defaultValue={defaultValue}\r\n                mode=\"multiple\"\r\n                allowClear\r\n                style={{ width: '100%' }}\r\n                size=\"large\"\r\n                placeholder=\"e.g. css or typescript\"\r\n                onChange={onTagChange}\r\n            >\r\n                {renderOptions()}\r\n            </Select>\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default TagSelect;\r\n","import { FilterType, USER_TYPE } from '../constants';\r\nimport {\r\n    getLocalStore,\r\n    fakePromise,\r\n    updateJobsLocalStore,\r\n} from '../utils/fake-apis-utils';\r\n\r\nexport interface Job {\r\n    id: string;\r\n    companyName: string;\r\n    title: string;\r\n    contact: string;\r\n    description: string;\r\n    requirement: string;\r\n    location: string;\r\n    createdAt: Date;\r\n    createdBy: string; // Todo: maps to user\r\n    salaryRange: [number, number];\r\n    tags: Array<string>;\r\n    applicants: Array<string>;\r\n}\r\n\r\nconst isFilterApplied = (\r\n    job: Job,\r\n    tagsSet: Set<string>,\r\n    minSalary: number\r\n): boolean => {\r\n    let has = false;\r\n\r\n    if (\r\n        (tagsSet.size === 0 ||\r\n            job.tags.some((tag) => tagsSet.has(tag.toLowerCase()))) &&\r\n        job.salaryRange[0] >= minSalary\r\n    ) {\r\n        has = true;\r\n    }\r\n\r\n    return has;\r\n};\r\n\r\nexport const getAppliedJobs = (appliedTo: string[]): Promise<Job[]> => {\r\n    const appliedSet = new Set(appliedTo);\r\n    const { jobsData } = getLocalStore();\r\n\r\n    const appliedJobs = jobsData.filter(({ id }) => appliedSet.has(id));\r\n    return fakePromise(appliedJobs) as Promise<Job[]>;\r\n};\r\n\r\nexport const getJobs = async (\r\n    userEmail: string = '',\r\n    jobFilter: FilterType,\r\n    paginated: { pageSize: number; offset: number } = {\r\n        pageSize: 10,\r\n        offset: 0,\r\n    }\r\n): Promise<any> => {\r\n    const { jobsData, usersData } = getLocalStore();\r\n    const user = usersData.find(({ email }) => email === userEmail);\r\n    const appliedSet = new Set(user?.userDetails.appliedTo);\r\n    const tagsSet = new Set(jobFilter.tags.map((tag) => tag.toLowerCase()));\r\n    const transformedMinSalary = Number.isNaN(parseInt(jobFilter.minSalary, 10))\r\n        ? 0\r\n        : parseInt(jobFilter.minSalary, 10);\r\n\r\n    let jobs;\r\n    if (user?.userDetails.type === USER_TYPE.CANDIDATE) {\r\n        jobs = jobsData.filter(\r\n            (job) =>\r\n                !appliedSet.has(job.id) &&\r\n                isFilterApplied(job, tagsSet, transformedMinSalary)\r\n        );\r\n    } else {\r\n        jobs = jobsData.filter(\r\n            (job) =>\r\n                job.createdBy === user?.id &&\r\n                isFilterApplied(job, tagsSet, transformedMinSalary)\r\n        );\r\n    }\r\n\r\n    const totalJobs = jobs.length;\r\n    // console.log({ totalJobs });\r\n    const start = paginated.offset * paginated.pageSize;\r\n    const slicedJobs = jobs.slice(start, start + paginated.pageSize);\r\n    // console.log({ slicedJobs });\r\n\r\n    return fakePromise({ jobs: slicedJobs, totalJobs });\r\n};\r\n\r\nexport const getJob = async (jobId: string): Promise<any> => {\r\n    return fakePromise();\r\n};\r\n\r\nexport const createJob = async (payload: Partial<Job>): Promise<any> => {\r\n    const { jobsData } = getLocalStore();\r\n    const id = `J-${10000 + jobsData.length + 1}`;\r\n    const newJob: Job = {\r\n        ...payload,\r\n        id,\r\n        createdAt: new Date(),\r\n        applicants: [],\r\n    } as Job;\r\n\r\n    // jobsData.push(newJob);\r\n    jobsData.unshift(newJob); // O(n) operation\r\n\r\n    await updateJobsLocalStore(jobsData);\r\n\r\n    return fakePromise();\r\n};\r\n\r\nexport const updateJob = async (\r\n    jobId: string,\r\n    payload: Partial<Job>\r\n): Promise<any> => {\r\n    const { jobsData } = getLocalStore();\r\n\r\n    for (const index in jobsData) {\r\n        if (jobsData[index].id === jobId) {\r\n            jobsData[index] = {\r\n                ...jobsData[index],\r\n                ...payload,\r\n                applicants: [\r\n                    ...jobsData[index].applicants,\r\n                    ...(payload.applicants as string[]),\r\n                ],\r\n            };\r\n        }\r\n    }\r\n\r\n    await updateJobsLocalStore(jobsData);\r\n\r\n    return fakePromise();\r\n};\r\n\r\nexport const deleteJob = async (jobId: string): Promise<any> => {\r\n    return fakePromise();\r\n};\r\n"],"names":["editProfileFormData","setEditProfileFormData","onChangeHandler","e","prevData","target","name","value","currentUser","useContext","UserContext","isRecruiter","userDetails","type","USER_TYPE","onUserDetailsChangeHandler","className","layout","initialValues","remember","email","companyName","contact","githubUsername","location","autoComplete","label","placeholder","onChange","size","required","minLength","password","confirmPassword","onTagChange","skills","defaultValue","data","setCurrentUserAndLocalStorage","useLocation","isProfileRoute","pathname","ROUTES","useState","jobApplicants","setJobApplicants","jobApplicantsData","setJobApplicantsData","isApplicantsDataLoading","setIsApplicantsDataLoading","isJobModalOpen","setIsJobModalOpen","isApplicantsModalOpen","setIsApplicantsModalOpen","useEffect","length","getAppliedUsers","then","catch","openJobModal","onApplyClickHandler","jobId","stopPropagation","newPayload","appliedTo","updateUser","updateJob","applicants","id","notification","message","description","SUCCESS","placement","onNotInterestedClickHandler","ERROR","map","title","tags","hoverable","onClick","bordered","icon","UserOutlined","openApplicantsModal","italic","ellipsis","expandable","rows","tag","open","onOk","onCancel","cancelText","okButtonProps","applicant","header","currentUserProfile","openEditProfileModal","setOpenEditProfileModal","gitHubRepos","setGitHubRepos","appliedJobs","setAppliedJobs","initialFetching","setInitialFetching","isLoading","setIsLoading","initialJobsFetching","setInitialJobsFetching","isJobsLoading","setIsJobsLoading","isOkLoading","setIsOkLoading","getUserGitHubRepos","getAppliedJobs","to","match","payload","okText","cancelButtonProps","loading","skill","renderSkills","active","strong","repo","window","html_url","stargazers_count","watchers_count","forks_count","showSearch","showArrow","mode","allowClear","style","width","tagsOptions","isFilterApplied","job","tagsSet","minSalary","has","some","toLowerCase","salaryRange","appliedSet","Set","getLocalStore","jobsData","filter","fakePromise","getJobs","userEmail","jobFilter","paginated","pageSize","offset","usersData","user","find","transformedMinSalary","Number","isNaN","parseInt","jobs","createdBy","totalJobs","start","slicedJobs","slice","createJob","newJob","createdAt","Date","unshift","updateJobsLocalStore","index"],"sourceRoot":""}