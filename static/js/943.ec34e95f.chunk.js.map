{"version":3,"file":"static/js/943.ec34e95f.chunk.js","mappings":"uVA0GA,EA/FoC,WAChC,OACIA,EAAAA,EAAAA,YAAWC,EAAAA,GADPC,EAAW,EAAXA,YAAaC,EAA6B,EAA7BA,8BAErB,GAAgCC,EAAAA,EAAAA,UAAS,CACrCC,MAAO,GACPC,SAAU,KACZ,eAHKC,EAAQ,KAAEC,EAAW,KAI5B,GAA8CJ,EAAAA,EAAAA,WAAkB,GAAM,eAA/DK,EAAe,KAAEC,EAAkB,KAE1C,GAAIR,EACA,OAAO,SAAC,KAAQ,CAACS,GAAIC,EAAAA,GAAAA,cAGzB,IAAQP,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAETO,EAAW,SAACC,GACdN,GAAY,SAACO,GAAQ,yBACdA,GAAQ,cACVD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,OAAK,GAEvC,EAEMC,EAAQ,yCAAG,WAAOL,GAAmC,sEACvDJ,GAAmB,IAEnBU,EAAAA,EAAAA,IAAQf,EAAOC,GACVe,MAAK,SAACnB,GAC0B,OAA7BC,QAA6B,IAA7BA,GAAAA,EAAgCD,EAEpC,IACCoB,OAAM,SAACC,GACJb,GAAmB,GACnBc,EAAAA,EAAAA,MAAsB,CAClBC,QAAS,GACTC,YAAaH,EACbI,UAAW,eAEnB,IAAG,2CACV,gBAhBa,sCAkBd,OACI,gBAAKC,UAAU,gBAAe,UAC1B,qBAASA,UAAU,gBAAe,WAC9B,SAAC,UAAgB,CAACA,UAAU,QAAO,oBACnC,UAAC,IAAI,CACDX,KAAK,QACLY,OAAO,WACPC,cAAe,CAAEC,UAAU,GAC3BC,SAAUb,EACVc,aAAa,KAAI,WAEjB,SAAC,SAAS,CAACC,MAAM,QAAQjB,KAAK,QAAO,UACjC,SAAC,IAAK,CACFkB,KAAK,QACLlB,KAAK,QACLmB,YAAY,wBACZlB,MAAOb,EACPQ,SAAUA,EACVwB,KAAK,QACLC,UAAQ,OAGhB,SAAC,SAAS,CAACJ,MAAM,WAAWjB,KAAK,WAAU,UACvC,SAAC,aAAc,CACXkB,KAAK,WACLP,UAAU,iBACVX,KAAK,WACLmB,YAAY,6BACZG,UAAW,EACXrB,MAAOZ,EACPO,SAAUA,EACVwB,KAAK,QACLC,UAAQ,OAGhB,SAAC,SAAS,WACN,SAAC,IAAM,CACHH,KAAK,UACLK,QAAS/B,EACT4B,KAAK,QACLI,SAAS,SAAQ,yBAM7B,UAAC,cAAoB,oCACM,KACvB,SAAC,KAAI,CAAC9B,GAAIC,EAAAA,GAAAA,kBAAyB,4BAKvD,C","sources":["components/login/index.tsx"],"sourcesContent":["import { useContext, useState } from 'react';\r\nimport { Input, Button, Typography, Form, notification } from 'antd';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { ROUTES } from '../../constants';\r\nimport { getUser } from '../../fake-apis/user-apis';\r\nimport { UserContext } from '../../contexts/UserContext';\r\n\r\nimport './styles.scss';\r\n\r\ninterface LoginProps {}\r\n\r\nconst Login: React.FC<LoginProps> = () => {\r\n    const { currentUser, setCurrentUserAndLocalStorage } =\r\n        useContext(UserContext);\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        password: '',\r\n    });\r\n    const [isButtonLoading, setIsButtonLoading] = useState<boolean>(false);\r\n\r\n    if (currentUser) {\r\n        return <Navigate to={ROUTES.JOB_LISTING} />;\r\n    }\r\n\r\n    const { email, password } = formData;\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData((prevData) => ({\r\n            ...prevData,\r\n            [e.target.name]: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        setIsButtonLoading(true);\r\n\r\n        getUser(email, password)\r\n            .then((currentUser) => {\r\n                setCurrentUserAndLocalStorage?.(currentUser);\r\n                // navigate(ROUTES.JOB_LISTING);\r\n            })\r\n            .catch((errorMessage) => {\r\n                setIsButtonLoading(false);\r\n                notification['error']({\r\n                    message: '',\r\n                    description: errorMessage,\r\n                    placement: 'bottomRight',\r\n                });\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-wrapper\">\r\n            <section className=\"login-content\">\r\n                <Typography.Title className=\"title\">Login</Typography.Title>\r\n                <Form\r\n                    name=\"login\"\r\n                    layout=\"vertical\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onSubmit}\r\n                    autoComplete=\"on\"\r\n                >\r\n                    <Form.Item label=\"Email\" name=\"email\">\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"e.g. john.doe@xyz.com\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Password\" name=\"password\">\r\n                        <Input.Password\r\n                            type=\"password\"\r\n                            className=\"password-input\"\r\n                            name=\"password\"\r\n                            placeholder=\"e.g. not your phone number\"\r\n                            minLength={6}\r\n                            value={password}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            loading={isButtonLoading}\r\n                            size=\"large\"\r\n                            htmlType=\"submit\"\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <Typography.Paragraph>\r\n                    Don't have an account?{' '}\r\n                    <Link to={ROUTES.CANDIDATE_SIGN_UP}>Sign-up</Link>\r\n                </Typography.Paragraph>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["useContext","UserContext","currentUser","setCurrentUserAndLocalStorage","useState","email","password","formData","setFormData","isButtonLoading","setIsButtonLoading","to","ROUTES","onChange","e","prevData","target","name","value","onSubmit","getUser","then","catch","errorMessage","notification","message","description","placement","className","layout","initialValues","remember","onFinish","autoComplete","label","type","placeholder","size","required","minLength","loading","htmlType"],"sourceRoot":""}