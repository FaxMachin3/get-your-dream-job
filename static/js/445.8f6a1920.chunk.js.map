{"version":3,"file":"static/js/445.8f6a1920.chunk.js","mappings":"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","sources":["components/sign-up/index.tsx"],"sourcesContent":["import { useContext, useState } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { Input, Form, Typography, Button, notification } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { ROUTES, USER_TYPE } from '../../constants';\r\nimport { UserContext } from '../../contexts/UserContext';\r\n\r\nimport './styles.scss';\r\nimport { createUser, User } from '../../fake-apis/user-apis';\r\n\r\ninterface SignUpProps {}\r\n\r\nconst SignUp: React.FC<SignUpProps> = () => {\r\n    const location = useLocation();\r\n    const isRecruiter: boolean = location.pathname === ROUTES.RECRUITER_SIGN_UP;\r\n    const [isButtonLoading, setIsButtonLoading] = useState<boolean>(false);\r\n    const { currentUser, setCurrentUserAndLocalStorage } =\r\n        useContext(UserContext);\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        companyName: '',\r\n        githubUsername: '',\r\n    });\r\n    const {\r\n        name,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        githubUsername,\r\n        companyName,\r\n    } = formData;\r\n\r\n    if (currentUser) {\r\n        return <Navigate to={ROUTES.JOB_LISTING} />;\r\n    }\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFormData((prevData) => ({\r\n            ...prevData,\r\n            [e.target.name]: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const getUserDetails = () => {\r\n        if (isRecruiter) {\r\n            return {\r\n                type: USER_TYPE.RECRUITER,\r\n                companyName,\r\n            };\r\n        }\r\n\r\n        return {\r\n            type: USER_TYPE.CANDIDATE,\r\n            appliedTo: [],\r\n            skills: [],\r\n            githubUsername,\r\n        };\r\n    };\r\n\r\n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        if (password !== confirmPassword) {\r\n            notification['error']({\r\n                message: '',\r\n                description: 'Passwords do not match.',\r\n                placement: 'bottomRight',\r\n            });\r\n        } else {\r\n            setIsButtonLoading(true);\r\n            const payload: Partial<User> = {\r\n                name,\r\n                email,\r\n                password,\r\n                userDetails: { ...getUserDetails(), location: '' },\r\n            };\r\n\r\n            createUser(payload)\r\n                .then((currentUser) => {\r\n                    setCurrentUserAndLocalStorage?.(currentUser);\r\n                    // navigate(ROUTES.JOB_LISTING);\r\n                })\r\n                .catch((errorMessage) => {\r\n                    setIsButtonLoading(false);\r\n                    notification['error']({\r\n                        message: '',\r\n                        description: errorMessage,\r\n                        placement: 'bottomRight',\r\n                    });\r\n                });\r\n        }\r\n    };\r\n\r\n    const renderUserSpecificInputs = () =>\r\n        isRecruiter ? (\r\n            <Form.Item label=\"Your Company Name\" name=\"companyName\">\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"companyName\"\r\n                    placeholder=\"e.g. Intuit or Zerodha\"\r\n                    value={companyName}\r\n                    onChange={onChange}\r\n                    size=\"large\"\r\n                    required\r\n                />\r\n            </Form.Item>\r\n        ) : (\r\n            <Form.Item label=\"Github Username\" name=\"githubUsername\">\r\n                <Input\r\n                    type=\"text\"\r\n                    name=\"githubUsername\"\r\n                    placeholder=\"Your GitHub username\"\r\n                    value={githubUsername}\r\n                    size=\"large\"\r\n                    onChange={onChange}\r\n                />\r\n            </Form.Item>\r\n        );\r\n\r\n    return (\r\n        <div className=\"sign-up-wrapper\">\r\n            <section className=\"sign-up-content\">\r\n                <Typography.Title className=\"title\">Sign Up</Typography.Title>\r\n                <Form\r\n                    name=\"sign-up\"\r\n                    layout=\"vertical\"\r\n                    initialValues={{ remember: true }}\r\n                    onFinish={onSubmit}\r\n                    autoComplete=\"on\"\r\n                >\r\n                    <Form.Item label=\"Name\" name=\"name\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"e.g. John Doe\"\r\n                            value={name}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Email\" name=\"email\">\r\n                        <Input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"e.g. john.doe@xyz.com\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    {renderUserSpecificInputs()}\r\n                    <Form.Item label=\"Password\" name=\"password\">\r\n                        <Input.Password\r\n                            type=\"password\"\r\n                            className=\"password-input\"\r\n                            name=\"password\"\r\n                            placeholder=\"Set a password\"\r\n                            minLength={6}\r\n                            value={password}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Confirm Password\" name=\"confirmPassword\">\r\n                        <Input.Password\r\n                            type=\"password\"\r\n                            className=\"password-input\"\r\n                            name=\"confirmPassword\"\r\n                            placeholder=\"Retype to confirm\"\r\n                            minLength={6}\r\n                            value={confirmPassword}\r\n                            onChange={onChange}\r\n                            size=\"large\"\r\n                            required\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            size=\"large\"\r\n                            loading={isButtonLoading}\r\n                        >\r\n                            Sign up\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n                <div className=\"sign-up-footer\">\r\n                    <Typography.Paragraph>\r\n                        Already have an account?{' '}\r\n                        <Link to={ROUTES.LOGIN}>Login</Link>\r\n                    </Typography.Paragraph>\r\n                    <Typography.Paragraph>\r\n                        <Link\r\n                            to={\r\n                                isRecruiter\r\n                                    ? ROUTES.CANDIDATE_SIGN_UP\r\n                                    : ROUTES.RECRUITER_SIGN_UP\r\n                            }\r\n                        >\r\n                            {isRecruiter\r\n                                ? 'Candidate Sign-up'\r\n                                : 'Recruiter Sign-up'}\r\n                        </Link>\r\n                    </Typography.Paragraph>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n"],"names":["isRecruiter","useLocation","pathname","ROUTES","useState","isButtonLoading","setIsButtonLoading","useContext","UserContext","currentUser","setCurrentUserAndLocalStorage","name","email","password","confirmPassword","companyName","githubUsername","formData","setFormData","to","onChange","e","prevData","target","value","onSubmit","notification","message","description","placement","payload","userDetails","type","USER_TYPE","appliedTo","skills","location","createUser","then","catch","errorMessage","className","layout","initialValues","remember","onFinish","autoComplete","label","placeholder","size","required","minLength","htmlType","loading"],"sourceRoot":""}